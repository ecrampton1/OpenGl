#include "Renderer.hpp"
#include <GLFW/glfw3.h>
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include "VertexBuffer.hpp"
#include "IndexBuffer.hpp"
#include "VertexArray.hpp"
#include "Shader.hpp"
#include "Texture.hpp"
#include "glm/glm.hpp"
#include "glm/gtc/matrix_transform.hpp"



int main(void)
{
    GLFWwindow* window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    //specify the version (core vs compatibility)
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(960, 540, "Hello World", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    glfwSwapInterval(1);

    if (glewInit() != GLEW_OK)
    {
        std::cout << "Error" << std::endl;
    }

    glEnable(GL_DEBUG_OUTPUT);
    glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS);
    glDebugMessageCallback(MessageCallback, NULL);

    std::cout << glGetString(GL_VERSION) << std::endl;


    float positions[] = {
        100.0f, 100.0f, 0.0f, 0.0f, //0  
        200.0f, 100.0f, 1.0f, 0.0f, //1
        200.0f, 200.0f, 1.0f, 1.0f,//2
        100.0f, 200.0f, 0.0f, 1.0f //3
    };

    //float positions[] = {
    //    -0.5f, -0.5f, 0.0f, 0.0f, //0  
    //     0.5f, -0.5f, 1.0f, 0.0f, //1
    //     0.5f, 0.5f, 1.0f, 1.0f,//2
    //    -0.5f, 0.5f, 0.0f, 1.0f //3
    //};

    unsigned int indices[] = {
        0,1,2,
        2,3,0
    };

    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    

    unsigned int vao;
    glGenVertexArrays(1, &vao); //vertex array object not created with core
    glBindVertexArray(vao);

    VertexArray va;
    VertexBuffer vb(positions, 4 * 4 * sizeof(float));

    VertexBufferLayout layout;
    layout.Push<float>(2);
    layout.Push<float>(2); 
    va.AddBuffer(vb, layout);

    
    IndexBuffer ib(indices, 6);

    //This is the viewanthiny outside this space will not be rendered 0
    //converts positions into -1 to 1 on the opengl screen
    glm::mat4 proj = glm::ortho(0.0f,960.0f,0.0f,540.0f, -1.0f,1.0f);
    glm::mat4 view = glm::translate(glm::mat4(1.0f), glm::vec3(-100, 0,0));
    glm::mat4 model = glm::translate(glm::mat4x4(1.0f), glm::vec3(200, 200, 0));
    glm::mat4 mvp = proj * view * model;

    Shader shader("res/shaders/basic.shader");
    shader.Bind();


   // shader.SetUnform4f("u_Color", 0.2f, 0.3f, 0.8f, 1.0f);
    shader.SetUniformMat4f("u_MVP", mvp);//this will multiple the position to get into a fix space

    Texture texture("res/textures/image.png");
    texture.Bind();
    shader.SetUnform1i("u_Texture", 0);//binds to texture 0

    //useless to unbind
    va.Unbind();    
    vb.Unbind();
    ib.Unbind();
    shader.Unbind();

    Renderer renderer;

    float r = 0.0f;
    float increment = 0.05f;
    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window))
    {
        /* Render here */
        renderer.clear();
        shader.Bind();
       // shader.SetUnform4f("u_Color", r, 0.3f, 0.8f, 1.0f);
            
        

        renderer.Draw(va, ib, shader);
        
        r += increment;
        if (r > 1.0f)
            increment = -0.05;
        else if (r < 0.0f)
            increment = 0.05f;

        //glDrawElementss.... used as well.
        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
    }

    //glDeleteProgram(shader);
    glfwTerminate();
    return 0;
}