#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>




//OPenGL Callback taken from khronos.org/opengl/wiki/opengl_error
void GLAPIENTRY
MessageCallback(GLenum source,
    GLenum type,
    GLuint id,
    GLenum severity,
    GLsizei length,
    const GLchar* message,
    const void* userParam)
{
    fprintf(stderr, "GL CALLBACK: %s type = 0x%x, severity = 0x%x, message = %s\n",
        (type == GL_DEBUG_TYPE_ERROR ? "** GL ERROR **" : ""),
        type, severity, message);
}

//clear errors
//The next two functions need to be wrapped into a template or macro.
static void GLClearError()
{
    while (glGetError() != GL_NO_ERROR);
}

static void GLCheckError()
{
    while (GLenum error = glGetError())
    {
        std::cout << "GL Error - " << error << std::endl;
    }
}

enum class ShaderType
{
    NONE = -1, VERTEX = 0, FRAGMENT = 1
};

struct ShaderProgramSource
{
    std::string VertexSource;
    std::string FragmentSource;
};


//There should be a faster way
//Also horrible error handling.
static ShaderProgramSource  ParseShader(const std::string& filepath)
{
    std::ifstream stream(filepath);

    std::string line;
    ShaderType type = ShaderType::NONE;
    std::stringstream ss[2];

    while (getline(stream, line))
    {
        if (line.find("#shader") != std::string::npos)
        {
            if (line.find("vertex") != std::string::npos)
            {
                type = ShaderType::VERTEX;
            }
            else if (line.find("fragment") != std::string::npos)
            {
                type = ShaderType::FRAGMENT;
            }
        }
        else
        {
            ss[(int)type] << line << '\n';
        }
    }

    return { ss[0].str(), ss[1].str() };
}


static unsigned int CompileShader(unsigned int type, const std::string& source)
{
    unsigned int id = glCreateShader(type);
    const char* src = source.c_str();
    //careful the source is set yo
    glShaderSource(id, 1, &src, nullptr);
    glCompileShader(id);

    //TODO: Error handling
    int result = 0;
    glGetShaderiv(id, GL_COMPILE_STATUS, &result); //integer vector
    if (result == GL_FALSE)
    {
        int length;
        glGetShaderiv(id, GL_INFO_LOG_LENGTH, &length);
        char* message = (char*)alloca(length*sizeof(char));
        glGetShaderInfoLog(id, length, &length, message);
        
        std::cout << type << " Compile Failed: " << message << std::endl;
        glDeleteShader(id);
        return 0;
    }

    return id;
}

static int CreateShader(const std::string& vertexShader, const std::string& fragmentShader)
{
    unsigned int program = glCreateProgram();
    unsigned int vs = CompileShader(GL_VERTEX_SHADER,vertexShader);  //program 1 (compiled)
    unsigned int fs = CompileShader(GL_FRAGMENT_SHADER, fragmentShader); //program 2 (compiled)

    glAttachShader(program, vs); //(compile)
    glAttachShader(program, fs); //(compile)
    glLinkProgram(program);// (link)
    glValidateProgram(program);

    //may be better to detachshader instead of delete.  for debuggers
    glDeleteShader(vs);
    glDeleteShader(fs);
    
    return program;
}

int main(void)
{
    GLFWwindow* window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    //specify the version (core vs compatibility)
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 6);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(640, 480, "Hello World", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    glfwSwapInterval(1);

    if (glewInit() != GLEW_OK)
    {
        std::cout << "Error" << std::endl;
    }

    glEnable(GL_DEBUG_OUTPUT);
    glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS);
    glDebugMessageCallback(MessageCallback, NULL);

    unsigned int a;
    glGenBuffers(1, &a);

    std::cout << glGetString(GL_VERSION) << std::endl;


    float positions[] = {
        -0.5f, -0.5f, //0
        0.5f, 0.5f, //1
        0.5f, -0.5f, //2
        -0.5f, 0.5f //3
    };

    unsigned int indices[] = {
        0,1,2,
        3,1,0
    };

    unsigned int vao;
    glGenVertexArrays(1, &vao); //vertex array object not created with core
    glBindVertexArray(vao);

    //create buffer and pass in to create that buffer for the GPU
    //you get an id back (buffer) which relates to said buffer
    unsigned int buffer;
    glGenBuffers(1, &buffer);
    glBindBuffer(GL_ARRAY_BUFFER, buffer);//work on the buffer this binds buffer
    glBufferData(GL_ARRAY_BUFFER, 6 * 2 * sizeof(float), positions,GL_STATIC_DRAW);//fills the buffer with the datar.  static means modified once but used multiple times. draw means the buffer is used for drawring.

    glEnableVertexAttribArray(0); //enable the vertex ? ok then
    glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float),0);  //index 0 vertex array to currently bound buffer so vao is linked to buffer.

    unsigned int ibo;
    glGenBuffers(1, &ibo);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * sizeof(unsigned int), indices, GL_STATIC_DRAW);

    ShaderProgramSource source = ParseShader("res/shaders/basic.shader");

    unsigned int shader = CreateShader(source.VertexSource,source.FragmentSource);
    glUseProgram(shader);

    int location = glGetUniformLocation(shader, "u_Color");//from the shader file
    _ASSERT(location != -1);
    glUniform4f(location, 0.2f, 0.3f, 0.8f, 1.0f);

    glBindVertexArray(0);
    glUseProgram(0);
    glBindBuffer(GL_ARRAY_BUFFER, 0);//work on the buffer this binds buffer
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

    float r = 0.0f;
    float increment = 0.05f;
    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window))
    {
        /* Render here */
        glClear(GL_COLOR_BUFFER_BIT);


        glUseProgram(shader);
        glUniform4f(location, 0.2f, 0.3f, 0.8f, 1.0f);

        glBindBuffer(GL_ARRAY_BUFFER, buffer);//work on the buffer this binds buffer

        //Has to be done each time because this could change?
        glBindVertexArray(vao);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);

        glUniform4f(location, r, 0.3f, 0.8f, 1.0f);
        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, nullptr);

        
        r += increment;
        if (r > 1.0f)
            increment = -0.05;
        else if (r < 0.0f)
            increment = 0.05f;

        //glDrawElementss.... used as well.
        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
    }

    //glDeleteProgram(shader);
    glfwTerminate();
    return 0;
}